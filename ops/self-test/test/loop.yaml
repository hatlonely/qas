name: TestLoop
step:
  - ctx: shell
    req:
      command: qas --test ops/self-test-cases/loop --reporter json
      decoder: json
    res:
      exitCode: 0
      json: {
        "directory": "ops/self-test-cases/loop",
        "name": "test-loop",
        "status": "pass",
        "description": "",
        "isSkip": false,
        "isPass": true,
        "isErr": false,
        "err": "",
        "#elapse": "val > 0",
        "casePass": 5,
        "caseFail": 0,
        "caseSkip": 0,
        "setupPass": 0,
        "setupFail": 0,
        "teardownPass": 0,
        "teardownFail": 0,
        "currCasePass": 5,
        "currCaseFail": 0,
        "currCaseSkip": 0,
        "stepPass": 5,
        "stepFail": 0,
        "stepSkip": 0,
        "assertionPass": 40,
        "assertionFail": 0,
        "subTestPass": 0,
        "subTestSkip": 0,
        "subTestFail": 0,
        "cases": [
          {
            "id": "ctx",
            "name": "LoopExample1",
            "directory": "ops/self-test-cases/loop",
            "description": "",
            "command": "qas -t \"ops/self-test-cases/loop\" -c \"\" --case-id \"ctx\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n \"${KEY1} ${KEY2}\"",
                  "envs": {
                    "KEY1": "world",
                    "KEY2": "456"
                  },
                  "decoder": "text"
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "world 456",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n \"${KEY1} ${KEY2}\"",
                      "envs": {
                        "KEY1": "hello",
                        "KEY2": "123"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "hello 123",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "hello 123",
                        "expect": "hello 123"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n \"${KEY1} ${KEY2}\"",
                      "envs": {
                        "KEY1": "hello",
                        "KEY2": "456"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "hello 456",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "hello 456",
                        "expect": "hello 456"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n \"${KEY1} ${KEY2}\"",
                      "envs": {
                        "KEY1": "world",
                        "KEY2": "123"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "world 123",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "world 123",
                        "expect": "world 123"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n \"${KEY1} ${KEY2}\"",
                      "envs": {
                        "KEY1": "world",
                        "KEY2": "456"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "world 456",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "world 456",
                        "expect": "world 456"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 8,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 8,
            "assertionFail": 0
          },
          {
            "id": "ctx-1",
            "name": "LoopExample2",
            "directory": "ops/self-test-cases/loop",
            "description": "",
            "command": "qas -t \"ops/self-test-cases/loop\" -c \"\" --case-id \"ctx-1\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                  "envs": {
                    "KEY1": "2",
                    "KEY2": "4"
                  },
                  "decoder": "text"
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "24",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "13",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "13",
                        "expect": "str(int(step.req['envs']['KEY1']) * 10 + int(step.req['envs']['KEY2']))"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "14",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "14",
                        "expect": "str(int(step.req['envs']['KEY1']) * 10 + int(step.req['envs']['KEY2']))"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "23",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "23",
                        "expect": "str(int(step.req['envs']['KEY1']) * 10 + int(step.req['envs']['KEY2']))"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "24",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "24",
                        "expect": "str(int(step.req['envs']['KEY1']) * 10 + int(step.req['envs']['KEY2']))"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 8,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 8,
            "assertionFail": 0
          },
          {
            "id": "ctx-2",
            "name": "LoopExample3",
            "directory": "ops/self-test-cases/loop",
            "description": "",
            "command": "qas -t \"ops/self-test-cases/loop\" -c \"\" --case-id \"ctx-2\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                  "envs": {
                    "KEY1": "2",
                    "KEY2": "4"
                  },
                  "decoder": "text"
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "24",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "13",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "13",
                        "expect": "{\n  \"1\": {\n    \"3\": \"13\",\n    \"4\": \"14\",\n  },\n  \"2\": {\n    \"3\": \"23\",\n    \"4\": \"24\",\n  },\n}[step.req['envs']['KEY1']][step.req['envs']['KEY2']]\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "14",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "14",
                        "expect": "{\n  \"1\": {\n    \"3\": \"13\",\n    \"4\": \"14\",\n  },\n  \"2\": {\n    \"3\": \"23\",\n    \"4\": \"24\",\n  },\n}[step.req['envs']['KEY1']][step.req['envs']['KEY2']]\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "23",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "23",
                        "expect": "{\n  \"1\": {\n    \"3\": \"13\",\n    \"4\": \"14\",\n  },\n  \"2\": {\n    \"3\": \"23\",\n    \"4\": \"24\",\n  },\n}[step.req['envs']['KEY1']][step.req['envs']['KEY2']]\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "24",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "24",
                        "expect": "{\n  \"1\": {\n    \"3\": \"13\",\n    \"4\": \"14\",\n  },\n  \"2\": {\n    \"3\": \"23\",\n    \"4\": \"24\",\n  },\n}[step.req['envs']['KEY1']][step.req['envs']['KEY2']]\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 8,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 8,
            "assertionFail": 0
          },
          {
            "id": "ctx-3",
            "name": "LoopExample4",
            "directory": "ops/self-test-cases/loop",
            "description": "",
            "command": "qas -t \"ops/self-test-cases/loop\" -c \"\" --case-id \"ctx-3\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                  "envs": {
                    "KEY1": "2",
                    "KEY2": "4"
                  },
                  "decoder": "text"
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "24",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "13",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "13",
                        "expect": "str((lambda x, y: 10 + int(y) if x==\"1\" else 20 + int(y))(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "14",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "14",
                        "expect": "str((lambda x, y: 10 + int(y) if x==\"1\" else 20 + int(y))(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "23",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "23",
                        "expect": "str((lambda x, y: 10 + int(y) if x==\"1\" else 20 + int(y))(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "24",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "24",
                        "expect": "str((lambda x, y: 10 + int(y) if x==\"1\" else 20 + int(y))(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 8,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 8,
            "assertionFail": 0
          },
          {
            "id": "ctx-4",
            "name": "LoopExample4",
            "directory": "ops/self-test-cases/loop",
            "description": "",
            "command": "qas -t \"ops/self-test-cases/loop\" -c \"\" --case-id \"ctx-4\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                  "envs": {
                    "KEY1": "2",
                    "KEY2": "4"
                  },
                  "decoder": "text"
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "24",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "13",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "13",
                        "expect": "def calculate(x, y):\n  if x == \"1\":\n    return 10 + int(y)\n  if x == \"2\":\n    return 20 + int(y)\nres = str(calculate(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "1",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "14",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "14",
                        "expect": "def calculate(x, y):\n  if x == \"1\":\n    return 10 + int(y)\n  if x == \"2\":\n    return 20 + int(y)\nres = str(calculate(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "3"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "23",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "23",
                        "expect": "def calculate(x, y):\n  if x == \"1\":\n    return 10 + int(y)\n  if x == \"2\":\n    return 20 + int(y)\nres = str(calculate(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  },
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n $(($KEY1 * 10 + $KEY2))",
                      "envs": {
                        "KEY1": "2",
                        "KEY2": "4"
                      },
                      "decoder": "text"
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "24",
                      "stderr": ""
                    },
                    "assertions": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "stdout",
                        "val": "24",
                        "expect": "def calculate(x, y):\n  if x == \"1\":\n    return 10 + int(y)\n  if x == \"2\":\n    return 20 + int(y)\nres = str(calculate(step.req['envs']['KEY1'], step.req['envs']['KEY2']))\n"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      }
                    ],
                    "assertionPass": 2,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 8,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 8,
            "assertionFail": 0
          }
        ],
        "setups": [],
        "teardowns": [],
        "subTests": []
      }
