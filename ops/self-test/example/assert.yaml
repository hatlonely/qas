name: TestAssert
step:
  - ctx: shell
    req:
      command: qas --test ops/example-docs/assert --reporter json
      decoder: json
    res:
      exitCode: 0
      json: {
        "#id": "len(val) > 0",
        "directory": "ops/example-docs/assert",
        "name": "assert-example",
        "status": "pass",
        "description": "",
        "isSkip": false,
        "isPass": true,
        "isErr": false,
        "err": "",
        "#elapse": "val > 0",
        "casePass": 2,
        "caseFail": 0,
        "caseSkip": 0,
        "setUpPass": 0,
        "setUpFail": 0,
        "tearDownPass": 0,
        "tearDownFail": 0,
        "currCasePass": 2,
        "currCaseFail": 0,
        "currCaseSkip": 0,
        "stepPass": 2,
        "stepFail": 0,
        "stepSkip": 0,
        "assertionPass": 11,
        "assertionFail": 0,
        "subTestPass": 0,
        "subTestSkip": 0,
        "subTestFail": 0,
        "cases": [
          {
            "id": "ctx",
            "name": "AssertExample1",
            "directory": "ops/example-docs/assert",
            "description": "",
            "command": "qas -t \"ops/example-docs/assert\" -c \"\" --case-id \"ctx\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo '{\n  \"key1\": \"val1\",\n  \"key2\": 123,\n  \"key3\": {\n    \"key4\": \"val4\",\n    \"key5\": [{\n      \"key6\": \"val6\",\n      \"key7\": [\n        456,\n        \"val7\"\n      ],\n      \"key8\": 333\n    }]\n  }\n}'\n",
                  "decoder": "json",
                  "envs": {},
                  "files": {},
                  "tmp": "/tmp",
                  "clean": true
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "{\n  \"key1\": \"val1\",\n  \"key2\": 123,\n  \"key3\": {\n    \"key4\": \"val4\",\n    \"key5\": [{\n      \"key6\": \"val6\",\n      \"key7\": [\n        456,\n        \"val7\"\n      ],\n      \"key8\": 333\n    }]\n  }\n}\n",
                  "stderr": "",
                  "json": {
                    "key1": "val1",
                    "key2": 123,
                    "key3": {
                      "key4": "val4",
                      "key5": [
                        {
                          "key6": "val6",
                          "key7": [
                            456,
                            "val7"
                          ],
                          "key8": 333
                        }
                      ]
                    }
                  }
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo '{\n  \"key1\": \"val1\",\n  \"key2\": 123,\n  \"key3\": {\n    \"key4\": \"val4\",\n    \"key5\": [{\n      \"key6\": \"val6\",\n      \"key7\": [\n        456,\n        \"val7\"\n      ],\n      \"key8\": 333\n    }]\n  }\n}'\n",
                      "decoder": "json",
                      "envs": {},
                      "files": {},
                      "tmp": "/tmp",
                      "clean": true
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "{\n  \"key1\": \"val1\",\n  \"key2\": 123,\n  \"key3\": {\n    \"key4\": \"val4\",\n    \"key5\": [{\n      \"key6\": \"val6\",\n      \"key7\": [\n        456,\n        \"val7\"\n      ],\n      \"key8\": 333\n    }]\n  }\n}\n",
                      "stderr": "",
                      "json": {
                        "key1": "val1",
                        "key2": 123,
                        "key3": {
                          "key4": "val4",
                          "key5": [
                            {
                              "key6": "val6",
                              "key7": [
                                456,
                                "val7"
                              ],
                              "key8": 333
                            }
                          ]
                        }
                      }
                    },
                    "expects": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "exitCode",
                        "val": 0,
                        "expect": 0
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key2",
                        "val": 123,
                        "expect": "val % 3 == 0"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key1",
                        "val": "val1",
                        "expect": "val1"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key3.key4",
                        "val": "val4",
                        "expect": "len(val) == 4"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key3.key5.0.key6",
                        "val": "val6",
                        "expect": "val.endswith('6')"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key3.key5.0.key8",
                        "val": 333,
                        "expect": "111 * 3"
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key3.key5.0.key7.0",
                        "val": 456,
                        "expect": 456
                      },
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "json.key3.key5.0.key7.1",
                        "val": "val7",
                        "expect": "val7"
                      }
                    ],
                    "asserts": [
                      {
                        "isPass": true,
                        "rule": "res['exitCode'] == 0",
                        "message": ""
                      },
                      {
                        "isPass": true,
                        "rule": "'json' in res",
                        "message": ""
                      }
                    ],
                    "assertionPass": 10,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 10,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 10,
            "assertionFail": 0
          },
          {
            "id": "ctx-1",
            "name": "AssertExample2",
            "directory": "ops/example-docs/assert",
            "description": "",
            "command": "qas -t \"ops/example-docs/assert\" -c \"\" --case-id \"ctx-1\"",
            "status": "pass",
            "#elapse": "val > 0",
            "isPass": true,
            "isSkip": false,
            "steps": [
              {
                "name": "echo",
                "description": "",
                "ctx": "shell",
                "isSkip": false,
                "isPass": true,
                "req": {
                  "command": "echo -n \"hello world\"",
                  "envs": {},
                  "decoder": "text",
                  "files": {},
                  "tmp": "/tmp",
                  "clean": true
                },
                "res": {
                  "exitCode": 0,
                  "stdout": "hello world",
                  "stderr": ""
                },
                "subSteps": [
                  {
                    "isPass": true,
                    "isErr": false,
                    "err": "",
                    "req": {
                      "command": "echo -n \"hello world\"",
                      "envs": {},
                      "decoder": "text",
                      "files": {},
                      "tmp": "/tmp",
                      "clean": true
                    },
                    "res": {
                      "exitCode": 0,
                      "stdout": "hello world",
                      "stderr": ""
                    },
                    "expects": [
                      {
                        "isPass": true,
                        "message": "OK",
                        "node": "",
                        "val": {
                          "exitCode": 0,
                          "stdout": "hello world",
                          "stderr": ""
                        },
                        "expect": "val['stdout'].startswith('hello')"
                      }
                    ],
                    "asserts": [],
                    "assertionPass": 1,
                    "assertionFail": 0,
                    "#elapse": "val > 0"
                  }
                ],
                "assertionPass": 1,
                "assertionFail": 0,
                "#elapse": "val > 0"
              }
            ],
            "beforeCaseSteps": [],
            "afterCaseSteps": [],
            "stepPass": 1,
            "stepFail": 0,
            "assertionPass": 1,
            "assertionFail": 0
          }
        ],
        "setUps": [],
        "tearDowns": [],
        "subTests": []
      }

