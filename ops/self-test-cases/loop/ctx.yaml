name: loop-example

ctx:
  shell:
    type: shell

case:
  - name: LoopExample1
    step:
      - ctx: shell
        req:
          command: echo -n "${KEY1} ${KEY2}"
          envs:
            "!KEY1": ["hello", "world"]
            "!KEY2": ["123", "456"]
        res:
          exitCode: 0
          "!stdout":
            - "hello 123"
            - "hello 456"
            - "world 123"
            - "world 456"
  - name: LoopExample2
    step:
      - ctx: shell
        req:
          command: echo -n $(($KEY1 * 10 + $KEY2))
          envs:
            "!KEY1": ["1", "2"]
            "!KEY2": ["3", "4"]
        res:
          exitCode: 0
          "#stdout": "str(int(step.req['envs']['KEY1']) * 10 + int(step.req['envs']['KEY2']))"
  - name: LoopExample3
    step:
      - ctx: shell
        req:
          command: echo -n $(($KEY1 * 10 + $KEY2))
          envs:
            "!KEY1": [ "1", "2" ]
            "!KEY2": [ "3", "4" ]
        res:
          exitCode: 0
          "#stdout": |
            {
              "1": {
                "3": "13",
                "4": "14",
              },
              "2": {
                "3": "23",
                "4": "24",
              },
            }[step.req['envs']['KEY1']][step.req['envs']['KEY2']]

  - name: LoopExample4
    step:
      - ctx: shell
        req:
          command: echo -n $(($KEY1 * 10 + $KEY2))
          envs:
            "!KEY1": [ "1", "2" ]
            "!KEY2": [ "3", "4" ]
        res:
          exitCode: 0
          "#stdout": |
            str((lambda x, y: 10 + int(y) if x=="1" else 20 + int(y))(step.req['envs']['KEY1'], step.req['envs']['KEY2']))
  - name: LoopExample4
    step:
      - ctx: shell
        req:
          command: echo -n $(($KEY1 * 10 + $KEY2))
          envs:
            "!KEY1": [ "1", "2" ]
            "!KEY2": [ "3", "4" ]
        res:
          exitCode: 0
          "%stdout": |
            def calculate(x, y):
              if x == "1":
                return 10 + int(y)
              if x == "2":
                return 20 + int(y)
            res = str(calculate(step.req['envs']['KEY1'], step.req['envs']['KEY2']))
