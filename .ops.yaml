name: qas

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  default:
    NAME: qas
    REGISTRY_ENDPOINT: "{{.registry.dockerhub.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.dockerhub.username}}"
    REGISTRY_PASSWORD: "{{.registry.dockerhub.password}}"
    REGISTRY_NAMESPACE: "{{.registry.dockerhub.namespace}}"
    IMAGE_TAG: "$(git describe --tags | awk '{print(substr($0,2,length($0)))}'; test ${PIPESTATUS[0]} -eq 0)"
  dev:
    IMM_AK: "{{.credential.imm.accessKeyId}}"
    IMM_SK: "{{.credential.imm.accessKeySecret}}"
    IMM_ENDPOINT: https://imm.cn-shanghai.aliyuncs.com
    OTS_AK: "{{.credential.ots.accessKeyId}}"
    OTS_SK: "{{.credential.ots.accessKeySecret}}"
    OTS_INSTANCE: imm-dev-hl
    OTS_ENDPOINT: https://imm-dev-hl.cn-shanghai.ots.aliyuncs.com
    OSS_AK: "{{.credential.oss.accessKeyId}}"
    OSS_SK: "{{.credential.oss.accessKeySecret}}"
    OSS_ENDPOINT: oss-cn-shanghai.aliyuncs.com
    OSS_BUCKET: imm-test-hl-shanghai
    MNS_AK: "{{.credential.mns.accessKeyId}}"
    MNS_SK: "{{.credential.mns.accessKeySecret}}"
    MNS_ENDPOINT: "http://{{.credential.mns.ownerId}}.mns.cn-shanghai.aliyuncs.com"

task:
  example-docs:
    args:
      case:
        type: string
    step:
      - sh ${DEP}/ops/tool/render.sh ops/example-docs ${TMP}/example-docs
      - |
        if [[ "${case}" == "" ]]; then
          python3 main.py --test "${TMP}/example-docs" -x ops/x
        else
          python3 main.py --test "${TMP}/example-docs" -x ops/x --case "${case}"
        fi
  self-test:
    args:
      case_regex:
        type: string
    step:
      - |
        if [[ "${case_regex}" == "" ]]; then
          python3 main.py --test "ops/self-test" --hook trace
        else
          python3 main.py --test "ops/self-test" --case-regex "${case_regex}"
        fi
  install:
    step:
      - python3 setup.py install
  image:
    step:
      - docker login --username="${REGISTRY_USERNAME}" --password="${REGISTRY_PASSWORD}" "${REGISTRY_ENDPOINT}"
      - docker build --tag=${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${NAME}:${IMAGE_TAG} .
      - docker push "${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${NAME}:${IMAGE_TAG}"
  pip:
    step:
      - rm -rf dist
      - python3 setup.py sdist
      - pip3 install twine
      - twine upload dist/*
