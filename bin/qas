#!/usr/bin/env python3

import argparse
import sys
from qas.framework import Framework


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def main():
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.RawTextHelpFormatter(prog, width=200), description="""example:
    qas --test "tmp/env/dev/sample"
""")
    parser.add_argument("--debug", nargs="?", const=True, default=False, help="debug mod")
    parser.add_argument("-r", "--reporter", default="text", choices=["text", "json"], help="test directory")
    parser.add_argument("-t", "--test", required=True, help="test directory")
    parser.add_argument("-c", "--case", help="case directory")
    parser.add_argument("--case-name", help="case name")
    parser.add_argument("--case-regex", help="case regex")
    parser.add_argument("--skip-setup", nargs="?", const=True, default=False, type=str2bool, help="skip setup")
    parser.add_argument("--skip-teardown", nargs="?", const=True, default=False, type=str2bool, help="skip teardown")
    args = parser.parse_args()

    fw = Framework(
        args.test,
        case_directory=args.case,
        case_name=args.case_name,
        case_regex=args.case_regex,
        skip_setup=args.skip_setup,
        skip_teardown=args.skip_teardown,
        debug=args.debug,
        reporter=args.reporter,
    )
    if not fw.run():
        sys.exit(1)


if __name__ == '__main__':
    main()
